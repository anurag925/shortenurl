package main

import (
	"database/sql"

	_ "github.com/anurag/shortenurl/docs" // docs is generated by Swag CLI
	"github.com/anurag/shortenurl/internal/api"
	"github.com/anurag/shortenurl/internal/db/repositories"
	"github.com/anurag/shortenurl/internal/service"
	"github.com/anurag/shortenurl/internal/utils"
	"github.com/labstack/echo/v4"
	echoSwagger "github.com/swaggo/echo-swagger"
	"github.com/uptrace/bun"
	"github.com/uptrace/bun/dialect/sqlitedialect"
	"github.com/uptrace/bun/driver/sqliteshim"
)

// @title			URL Shortener API
// @version		1.0
// @description	API for shortening URLs
// @host			localhost:8080
// @schemes		http
func main() {
	// Initialize Echo
	e := echo.New()
	e.Validator = utils.NewCustomValidator()

	// Initialize SQLite database
	sqlite, err := sql.Open(sqliteshim.ShimName, "file:shortenurl.db?cache=shared")
	if err != nil {
		e.Logger.Fatal(err)
	}
	db := bun.NewDB(sqlite, sqlitedialect.New())

	// Register routes
	registerRoutes(e, db)

	// Start server
	e.Logger.Fatal(e.Start(":8080"))
}

func registerRoutes(e *echo.Echo, db *bun.DB) {
	// Initialize repository
	shortURLRepo := repositories.NewShortURLRepository(db)

	// Initialize service
	shortURLService := service.NewShortURLService(shortURLRepo)

	// Initialize handlers
	shortURLHandler := api.NewShortURLHandler(shortURLService)

	// API routes
	apiGroup := e.Group("/api/v1")
	apiGroup.POST("/shorten", shortURLHandler.ShortenURL)

	// Redirect route
	e.GET("/r/:short_code", shortURLHandler.Redirect)

	// Swagger route
	e.GET("/swagger/*", echoSwagger.WrapHandler)
}

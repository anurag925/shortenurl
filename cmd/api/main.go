package main

import (
	"database/sql"

	_ "github.com/anurag/shortenurl/docs" // docs is generated by Swag CLI
	"github.com/anurag/shortenurl/internal/api"
	"github.com/anurag/shortenurl/internal/api/middleware"
	"github.com/anurag/shortenurl/internal/db/repositories"
	"github.com/anurag/shortenurl/internal/service"
	"github.com/anurag/shortenurl/internal/utils"
	"github.com/labstack/echo/v4"
	echoSwagger "github.com/swaggo/echo-swagger"
	"github.com/uptrace/bun"
	"github.com/uptrace/bun/dialect/sqlitedialect"
	"github.com/uptrace/bun/driver/sqliteshim"
)

var secretKey = "your-secret-key-here"

// @title			URL Shortener API
// @version		1.0
// @description	API for shortening URLs
// @host			localhost:8080
// @schemes		http
func main() {
	// Initialize Echo
	e := echo.New()
	e.Validator = utils.NewCustomValidator()

	// Serve static files
	e.Static("/", "web")

	// Initialize SQLite database
	sqlite, err := sql.Open(sqliteshim.ShimName, "file:shortenurl.db?cache=shared")
	if err != nil {
		e.Logger.Fatal(err)
	}
	db := bun.NewDB(sqlite, sqlitedialect.New())

	// Register routes
	registerRoutes(e, db)

	// Start server
	e.Logger.Fatal(e.Start(":8080"))
}

func registerRoutes(e *echo.Echo, db *bun.DB) {
	// Initialize repositories
	shortURLRepo := repositories.NewShortURLRepository(db)
	userRepo := repositories.NewUserRepository(db) // Add this line

	// Initialize services
	shortURLService := service.NewShortURLService(shortURLRepo)
	authService := service.NewAuthService(userRepo, secretKey) // Update this line

	// Initialize handlers
	shortURLHandler := api.NewShortURLHandler(shortURLService)
	authHandler := api.NewAuthHandler(authService)

	// API routes
	apiGroup := e.Group("/api/v1")
	apiGroup.POST("/shorten", shortURLHandler.ShortenURL)

	// Redirect route
	e.GET("/r/:short_code", shortURLHandler.Redirect)

	// Swagger route
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// Initialize services

	// Public routes
	e.POST("/api/v1/register", authHandler.Register)
	e.POST("/api/v1/login", authHandler.Login)

	// Protected routes
	apiGroup.Use(middleware.JWTMiddleware(secretKey))
	apiGroup.POST("/auth/shorten", shortURLHandler.ShortenURL)
	// apiGroup.GET("/my-urls", shortURLHandler.GetMyURLs)

	// Public redirect route
	e.GET("/r/:short_code", shortURLHandler.Redirect)

	// In registerRoutes function, add:
	apiGroup.GET("/check-auth", authHandler.CheckAuth)
}
